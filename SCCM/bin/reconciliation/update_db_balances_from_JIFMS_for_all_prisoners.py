"""
This module reads the Microsoft Excel file generated by the reconcile_JIMS_to_db_for_all_prisoners module,
updates application database case balances, and records a reconciliation record in the db for that prisoner.
"""
from pathlib import Path

import keyring
import openpyxl
from openpyxl.utils import get_column_letter
import pandas as pd
import requests
from sqlalchemy import except_all

from SCCM.config import config
from SCCM.data.case_reconciliation import CaseReconciliation
from SCCM.data.court_cases import CourtCase
from SCCM.data.db_session import DbSession


def init_db():
    """
    creates global SQLAlchemy session object

    """
    p = Path.cwd()
    db_file = p.parent / 'db' / 'wiw_plra-old.sqlite'
    DbSession.global_init(str(db_file))


def get_changed_cases(file):
    """
    Process Excel file generated from reconcile_JIFMS_to_db.py module
    :param file: path to Excel file
    :return: dict of cases to update
    """
    c_list = []
    wb = openpyxl.load_workbook(file)

    sheet = wb.get_sheet_by_name('Compare PLRA Totals')
    rownum = 2  # skip first row for header
    for row in sheet.values:

        case_add = {'ecf_case_num': sheet.cell(row=rownum, column=5).value,
                    'case_id': sheet.cell(row=rownum, column=3).value,
                    'doc_num': sheet.cell(row=rownum, column=2).value,
                    'API_Amount_Assessed': sheet.cell(row=rownum, column=9).value,
                    'API_Amount_Collected': sheet.cell(row=rownum, column=10).value,
                    'API_Amount_Owed': sheet.cell(row=rownum, column=11).value
                    }
        c_list.append(case_add)
        rownum += 1

    return c_list

def main():
    config_path = Path('/Users/jwt/PycharmProjects/SCCM/SCCM')
    config_file = config_path / 'config' / 'config.ini'
    configuration = config.initialize_config(str(config_file))
    prod_vars = config.get_prod_vars(configuration, 'PROD')
    network_base_dir = prod_vars['NETWORK_BASE_DIR']
    prod_db_path = prod_vars['NETWORK_DB_BASE_DIR']
    db_file_name = prod_vars['DATABASE_SQLite']
    db_file = f'{prod_db_path}{db_file_name}'
    db_session = DbSession.global_init(db_file)
    ccam_username = prod_vars['CCAM_USERNAME']
    base_url = prod_vars['CCAM_API']
    # reconciliation_file_path = prod_vars['RECONCILIATION_FILE_PATH']
    # reconciliation_file = f'{reconciliation_file_path}/PLRA Compare.xlsx'
    reconciliation_file = '/Users/jwt/PycharmProjects/SCCM/SCCM/bin/reconciliation/PLRA Compare.xlsx'
    ccam_password = keyring.get_password("WIWCCA", ccam_username)
    session = requests.Session()
    session.auth = (ccam_username, ccam_password)
    cert_path = prod_vars['CLIENT_CERT_PATH']
    session.verify = cert_path

    case_list = get_changed_cases(reconciliation_file)

    for case in case_list:
        case_id = case['case_id']
        result = db_session.query(CourtCase, CaseBalance).filter(CourtCase.id == case_id). \
            filter(CourtCase.id == CaseBalance.court_case_id).first()
        if result is not None:
        # add a reconciliation record for updated balances
            print(f"Creating reconciliation record for case {case['ecf_case_num']}")
            new_recon_record = CaseReconciliation(court_case_id=case_id,
                                                  previous_amount_assessed=result.CaseBalance.amount_assessed,
                                                  previous_amount_collected = result.CaseBalance.amount_collected,
                                                  previous_amount_owed=result.CaseBalance.amount_owed,
                                                  updated_amount_assessed=case['API_Amount_Assessed'],
                                                  updated_amount_collected=case['API_Amount_Collected'],
                                                  updated_amount_owed=case['API_Amount_Owed']
                                                  )
            db_session.add(new_recon_record)

            # update case balance
            print(f"Updating case balance for case {case['ecf_case_num']}")
            result.CaseBalance.amount_assessed = case['API_Amount_Assessed']
            result.CaseBalance.amount_collected = case['API_Amount_Collected']
            result.CaseBalance.amount_owed = case['API_Amount_Owed']
            if case['API_Amount_Owed'] == 0:
                result.CourtCase.case_comment = 'PAID'
            else:
                result.CourtCase.case_comment = 'ACTIVE'
            try:
                db_session.add_all(result)
                db_session.commit()
            except:
                db_session.rollback()
                raise
        else:
            continue
    db_session.close()


if __name__ == '__main__':
    main()
